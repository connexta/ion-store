plugins {
	id "java"
	id "org.owasp.dependencycheck" version "5.0.0-M2"
	id "com.diffplug.gradle.spotless" version "3.20.0"
	id "org.sonarqube" version "2.7"
}

allprojects {
	sourceCompatibility = 1.11
	targetCompatibility = 1.11

	group = "com.connexta.multiintstore"
	version = "0.1.0-SNAPSHOT"
}

ext.quietTest = {
	project.hasProperty("quiet")
}

ext.skipIntegrationTests = {
	project.hasProperty("skipITests")
}

repositories {
	mavenCentral()
	mavenLocal()
}

class SpotlessConfig {
	static Closure getMisc() {
		return {
			target "**/*.gradle", "**/*.md", "**/.gitignore"
			trimTrailingWhitespace()
			indentWithTabs()
			endWithNewline()

			//  Replace single quotes with double tickets
			replace "Consistent quotations", "${(char) 39}", "\""
		}
	}

	static Closure getJava(File license) {
		return {
			licenseHeaderFile license
			removeUnusedImports()
			googleJavaFormat()
			trimTrailingWhitespace()
		}
	}
}

subprojects {
	apply plugin: "java"
	apply plugin: "org.owasp.dependencycheck"
	apply plugin: "com.diffplug.gradle.spotless"
	apply plugin: "org.sonarqube"

	dependencyCheck {
		failBuildOnCVSS = 4
		failOnError = true
		// To configure a suppression file once we start adding in dependencies:
		//suppressionFile = "config/dependencyCheck/suppressions.xml"

		// Add support for NVD mirror
		if (project.hasProperty("dependencyCheckUrlModified") && project.hasProperty("dependencyCheckUrlBase")) {
			println "Using NVD Mirrors: ${dependencyCheckUrlBase} and ${dependencyCheckUrlModified}"
			cve {
				urlModified = "${dependencyCheckUrlModified}"
				urlBase = "${dependencyCheckUrlBase}"
			}
		}
	}

	tasks.withType(Test) {
		//  Forces Gradle to always run the tests, regardless if they are up to date or not.
		outputs.upToDateWhen { false }

		def styler = [(TestResult.ResultType.FAILURE): { msg -> "\033[31m${msg}\033[0m" },
					(TestResult.ResultType.SKIPPED): { msg -> "\033[33m${msg}\033[0m" },
					(TestResult.ResultType.SUCCESS): { msg -> "\033[32m${msg}\033[0m" }]


		if (project.skipIntegrationTests()) {
			exclude "**/*IntegrationTest*"
		}

		def parallel = { desc ->
			if (project.quietTest()) {
				return "\t >"
			}
			return " > " + desc
		}
		def lastTestClass = ""

		//  Disable all events as we handle them
		testLogging {
			events = []
		}

		if (project.quietTest()) {
			onOutput {
				desc ->
					if (lastTestClass != desc.className && desc.className != null) {
						lastTestClass = desc.className
						def toPrint = " Starting tests for ${desc.className}: "
						logger.lifecycle("-=" * (toPrint.length() / 2) + "-")
						logger.lifecycle(toPrint)
					}
			}
		} else {
			onOutput {
				desc, event ->
					print(event.message)
			}
		}

		afterTest { desc, result ->
			logger.lifecycle("${parallel(desc.className)} ${desc.name}: ${styler[result.resultType](result.resultType)}")
			if (result.exception) {
				def stack = []
				if (project.quietTest()) {
					def toTake = 1
					for(def ele : result.exception.getStackTrace()) {
						if(ele.getClassName() == desc.className) {
							break
						}
						toTake++
					}
					stack = result.exception.getStackTrace().take(toTake) +
							"... ${result.exception.getStackTrace().length - toTake} more"
				}
				else {
					stack = result.exception.getStackTrace()
				}
				logger.lifecycle("\n${styler[result.resultType](result.exception)}\n\t" +
						styler[result.resultType]("at ${stack.join("\n\t")}") + "\n")
			}
		}

		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				def output = "Results: ${styler[result.resultType](result.resultType)} (${result.testCount} tests, " +
						"${result.successfulTestCount} successes, ${result.failedTestCount} failures, " +
						"${result.skippedTestCount} skipped)"
				def startItem = "|  ", endItem = "  |"
				def repeatLength = startItem.length() + output.length() + endItem.length()
				logger.lifecycle("\n" + ("-" * repeatLength) + "\n" + startItem + output + endItem + "\n" + ("-" * repeatLength))
			}
		}
	}

	repositories {
		mavenCentral()
		mavenLocal()
	}

	dependencies {
		implementation("org.springframework.boot:spring-boot-starter-web:2.1.5.RELEASE")
		implementation("com.fasterxml.jackson.core:jackson-databind:2.9.9") {
			force = true
			because "CVE-2019-12086 is contained within 2.9.8 the version Spring-Web 2.1.5 uses"
		}
		implementation("org.apache.tomcat.embed:tomcat-embed-websocket:9.0.19") {
			force = true
			because "CVE-2019-0232 in the transitive tomcat-embed-websocket dependency"
		}
		implementation("org.apache.tomcat.embed:tomcat-embed-core:9.0.19") {
			force = true
			because "CVE-2019-0232 in the transitive tomcat-embed-core dependency"
		}

		compileOnly "org.projectlombok:lombok:1.18.6"
		annotationProcessor "org.projectlombok:lombok:1.18.6"
		testImplementation "org.springframework.boot:spring-boot-starter-test:2.1.5.RELEASE"

		//  Test Dependencies :
		testCompile "junit:junit:4.12"
		// required if you want to use Mockito for unit tests
		testImplementation "org.mockito:mockito-core:2.23.0"
	}

	spotless {
		format "misc", SpotlessConfig.getMisc()
		java SpotlessConfig.getJava(rootProject.file("license.java"))
	}

	task listDependencies(type: DependencyReportTask)

}

spotless {
	format "misc", SpotlessConfig.getMisc()
}
