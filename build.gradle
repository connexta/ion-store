/*
 * Copyright (c) 2019 Connexta, LLC
 *
 * Released under the GNU Lesser General Public License version 3; see
 * https://www.gnu.org/licenses/lgpl-3.0.html
 */
/* Build Script */
import org.gradle.internal.jvm.Jvm

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath(Dependencies.springBootGradlePlugin())
        classpath(Dependencies.palantir())
    }
}

plugins {
    id "java"
    id "org.owasp.dependencycheck" version "5.0.0"
    id "com.diffplug.gradle.spotless" version "3.23.1"
    id "org.sonarqube" version "2.7.1"
}

allprojects {

    sourceCompatibility = Versions.java
    targetCompatibility = Versions.java

    if(sourceCompatibility != Jvm.current().javaVersion) {
        throw new Exception("You need Java ${sourceCompatibility} to build and run ${project.name}.\n" +
                "The current version installed is ${Jvm.current().javaVersion.majorVersion}.\n" +
                "For further reading see: \n\t> " +
                "https://github.com/connexta/multi-int-store#prerequisites")
    }

    group = "com.connexta.multiintstore"
    version = Versions.project

    apply plugin: "com.diffplug.gradle.spotless"

    spotless {
        File licenseFile = rootProject.file("license.java")
        format "misc", SpotlessConfig.getMisc()
        java SpotlessConfig.getJava(licenseFile)
        groovyGradle SpotlessConfig.getGroovy(licenseFile)
    }
}

ext.quietTest = {
    project.hasProperty("quiet")
}

ext.skipIntegrationTests = {
    project.hasProperty("skipITests")
}

repositories {
    mavenLocal()
    mavenCentral()
}

subprojects {
    apply plugin: "java"
    apply plugin: "org.owasp.dependencycheck"
    apply plugin: "org.sonarqube"
    apply plugin: "com.palantir.docker"

    dependencyCheck {
        failBuildOnCVSS = 4
        failOnError = true

        // Add support for NVD mirror
        if (project.hasProperty("dependencyCheckUrlModified") && project.hasProperty("dependencyCheckUrlBase")) {
            println "Using NVD Mirrors: ${dependencyCheckUrlBase} and ${dependencyCheckUrlModified}"
            cve {
                urlModified = "${dependencyCheckUrlModified}"
                urlBase = "${dependencyCheckUrlBase}"
            }
        }
    }

    tasks.withType(Test) {
        //  Forces Gradle to always run the tests, regardless if they are up to date or not.
        outputs.upToDateWhen { false }

        def styler = [(TestResult.ResultType.FAILURE): { msg -> "\033[31m${msg}\033[0m" },
                    (TestResult.ResultType.SKIPPED): { msg -> "\033[33m${msg}\033[0m" },
                    (TestResult.ResultType.SUCCESS): { msg -> "\033[32m${msg}\033[0m" }]


        if (project.skipIntegrationTests()) {
            exclude "**/*IntegrationTest*"
        }

        def parallel = { desc ->
            if (project.quietTest()) {
                return "\t >"
            }
            return " > " + desc
        }
        def lastTestClass = ""

        //  Disable all events as we handle them
        testLogging {
            events = []
        }

        if (project.quietTest()) {
            onOutput {
                desc ->
                    if (lastTestClass != desc.className && desc.className != null) {
                        lastTestClass = desc.className
                        def toPrint = " Starting tests for ${desc.className}: "
                        logger.lifecycle("-=" * (toPrint.length() / 2) + "-")
                        logger.lifecycle(toPrint)
                    }
            }
        } else {
            onOutput {
                desc, event ->
                    print(event.message)
            }
        }

        afterTest { desc, result ->
            logger.lifecycle("${parallel(desc.className)} ${desc.name}: ${styler[result.resultType](result.resultType)}")
            if (result.exception) {
                def stack = []
                if (project.quietTest()) {
                    def toTake = 1
                    for(def ele : result.exception.getStackTrace()) {
                        if(ele.getClassName() == desc.className) {
                            break
                        }
                        toTake++
                    }
                    stack = result.exception.getStackTrace().take(toTake) +
                            "... ${result.exception.getStackTrace().length - toTake} more"
                }
                else {
                    stack = result.exception.getStackTrace()
                }
                logger.lifecycle("\n${styler[result.resultType](result.exception)}\n\t" +
                        styler[result.resultType]("at ${stack.join("\n\t")}") + "\n")
            }
        }

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${styler[result.resultType](result.resultType)} (${result.testCount} tests, " +
                        "${result.successfulTestCount} successes, ${result.failedTestCount} failures, " +
                        "${result.skippedTestCount} skipped)"
                def startItem = "|  ", endItem = "  |"
                def repeatLength = startItem.length() + output.length() + endItem.length()
                logger.lifecycle("\n" + ("-" * repeatLength) + "\n" + startItem + output + endItem + "\n" + ("-" * repeatLength))
            }
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = uri("http://nexus.phx.connexta.com:8081/nexus/content/groups/public/") }
    }

    dependencies {
        compileOnly(Dependencies.lombok())
        annotationProcessor(Dependencies.lombok())

        //  Test Dependencies
        testImplementation(Dependencies.junit())
        testImplementation(Dependencies.mockito())
    }

    task listDependencies(type: DependencyReportTask)
}
