/*
 * Copyright (c) 2019 Connexta, LLC
 *
 * Released under the GNU Lesser General Public License version 3; see
 * https://www.gnu.org/licenses/lgpl-3.0.html
 */
/* Build Script */
import org.gradle.internal.jvm.Jvm

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.22.1"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE"
    }
}

plugins {
    id "com.diffplug.gradle.spotless" version "3.24.0"
    id "java"
    id "maven"
    id "org.owasp.dependencycheck" version "5.2.1"
    id "org.sonarqube" version "2.7.1"
}

allprojects {

    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    if (sourceCompatibility != Jvm.current().javaVersion) {
        throw new Exception("You need Java ${sourceCompatibility} to build and run ${project.name}.\n" +
                "The current version installed is ${Jvm.current().javaVersion.majorVersion}.\n" +
                "For further reading see: \n\t> " +
                "https://github.com/connexta/multi-int-store#prerequisites")
    }

    group = "com.connexta.multiintstore"
    version = "0.1.0-SNAPSHOT"

    apply plugin: "com.diffplug.gradle.spotless"

    spotless {
        File licenseFile = rootProject.file("license.java")
        format "misc", SpotlessConfig.getMisc()
        java SpotlessConfig.getJava(licenseFile)
        groovyGradle SpotlessConfig.getGroovy(licenseFile)
    }
}

ext.configArgs = [
        "parallel" : project.hasProperty("parallel"),
        "skipITests": project.hasProperty("skipITests"),
]

subprojects {
    apply plugin: "java"
    apply plugin: "org.owasp.dependencycheck"
    apply plugin: "org.sonarqube"
    apply plugin: "com.palantir.docker"

    dependencyCheck {
        failBuildOnCVSS = 4
        failOnError = true

        analyzers {
            ossIndexEnabled = false
        }

        // Add support for NVD mirror
        if (project.hasProperty("dependencyCheckUrlModified") && project.hasProperty("dependencyCheckUrlBase")) {
            println "Using NVD Mirrors: ${dependencyCheckUrlBase} and ${dependencyCheckUrlModified}"
            cve {
                urlModified = "${dependencyCheckUrlModified}"
                urlBase = "${dependencyCheckUrlBase}"
            }
        }
    }

    tasks.withType(Test) {
        //  Forces Gradle to always run the tests, regardless if they are up to date or not.
        outputs.upToDateWhen { false }

        if (project.configArgs["skipITests"]) {
            exclude "**/*IntegrationTest*"
        }
    }

    tasks.withType(Test, TestLogger.configs(project.configArgs))

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://nexus.phx.connexta.com:8081/nexus/content/repositories/ion-releases/" }
    }

    task listDependencies(type: DependencyReportTask)

}

task deploy(type: Exec) {
    dependsOn subprojects.build
    commandLine "./deploy.bash"
}
