# Compile Code, Unit Test, Dependency Scan, Static Analysis Scan, Build Image, Vulnerability Scan, Deploy Image to DockerHub
version: 2.1
orbs:
  snyk: snyk/snyk@0.0.8
  anchore: anchore/anchore-engine@1.4.0
jobs:
  build:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run: ./gradlew clean build -x test
  test:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run: ./gradlew clean build
      - run:
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
  dependency-scan:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run: ./gradlew dependencyCheckAnalyze
  quality-scan:
    docker:
      - image: circleci/openjdk:11-jdk
    parameters:
      sonar_key:
        type: string
      sonar_org:
        type: string
      sonar_url:
        type: string
      sonar_token:
        type: string
    steps:
      - checkout
      - run:
          command: |
            if [[ ! -z $CIRCLE_PULL_REQUEST ]];
            then
              ./gradlew sonarqube -Dsonar.projectKey=<<parameters.sonar_key>> -Dsonar.organization=<<parameters.sonar_org>> -Dsonar.host.url=<<parameters.sonar_url>> -Dsonar.login=<<parameters.sonar_token>> -Dsonar.pullrequest.key=${CIRCLE_PULL_REQUEST##*/} -Dsonar.pullrequest.branch=${CIRCLE_BRANCH} -Dsonar.pullrequest.base=master --info
            fi
  create-image:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          command: 'docker build -t "${IMAGE_REPO_AND_NAME}" .'
      - run: mkdir -p workspace
      - run:
          command: 'docker save ${IMAGE_REPO_AND_NAME} > workspace/temp_archive.tar'
      - persist_to_workspace:
          root: workspace
          paths:
            - temp_archive.tar
  anchore-image-scan:
    executor: anchore/anchore_engine
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          command: 'ls -al /tmp/workspace'
      - run:
          command: 'docker load -i /tmp/workspace/temp_archive.tar'
      - anchore/analyze_local_image:
          dockerfile_path: ./Dockerfile
          image_name: '${IMAGE_REPO_AND_NAME}'
          policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
          policy_failure: false
          timeout: '500'
      - anchore/parse_reports
      - store_artifacts:
          path: anchore-reports
  snyk-image-scan:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          command: 'ls -al /tmp/workspace'
      - run:
          command: 'docker load -i /tmp/workspace/temp_archive.tar'
      - snyk/scan:
          docker-image-name: '${IMAGE_REPO_AND_NAME}'
          fail-on-issues: false
          severity-threshold: high
          target-file: Dockerfile
          token-variable: SNYK_TOKEN
  snyk-dependency-scan:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - snyk/scan:
          severity-threshold: high
          token-variable: SNYK_TOKEN
  deploy:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          command: 'ls -al /tmp/workspace'
      - run:
          command: 'docker load -i /tmp/workspace/temp_archive.tar'
      - run:
          command: 'docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}'
      - run:
          command: 'docker push docker.io/${IMAGE_REPO_AND_NAME}'

workflows:
  fullrun:
    jobs:
      - build
      - test:
          requires:
            - build
      - dependency-scan:
          requires:
            - test
      - snyk-dependency-scan:
          requires:
            - test
      - quality-scan:
          requires:
            - test
          sonar_key: ${SONAR_KEY}
          sonar_org: ${SONAR_ORG}
          sonar_url: https://sonarcloud.io
          sonar_token: ${SONAR_TOKEN}
      - create-image:
          requires:
            - dependency-scan
            - snyk-dependency-scan
      - anchore-image-scan:
          requires:
            - create-image
      - snyk-image-scan:
          requires:
            - create-image
      - hold:
          type: approval
          requires:
            - anchore-image-scan
            - snyk-image-scan
      - deploy:
          requires:
            - hold